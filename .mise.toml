[tools]
go = "1.24.5"
yamlfmt = "latest"
staticcheck = "2025.1"
dprint = "latest"
"go:golang.org/x/perf/cmd/benchstat" = "latest"
"go:golang.org/x/tools/cmd/deadcode" = "latest"

[tasks.setup]
run = ["mise install", "go mod tidy"]

[tasks.format]
run = ["dprint fmt"]

[tasks.lint]
description = "Run all linting checks"
depends = ["lint:*"]

[tasks."lint:format"]
run = ["dprint check"]

[tasks."lint:api"]
description = "Run staticcheck and go vet"
run = ["staticcheck ./...", "go vet ./..."]

[tasks."lint:deadcode"]
description = "Check for dead code (ignoring exported functions)"
run = [
  "deadcode -test ./... | grep -v -E 'unreachable func: (High|Multi|Parse|With)' || true",
]

[tasks."lint:state"]
description = "Check for direct s.state access (should use atomic helpers)"
run = ["go run ./tools/statelint/main.go -dir ."]

[tasks.test]
description = "Run tests with race detection"
run = ["go test -v ./... -race -shuffle=on -timeout=5m -count=2"]

[tasks."test:all"]
description = "Run all tests including integration tests"
run = ["go test -v -tags=integration ./... -race -timeout 60s"]

[tasks."test:integration"]
description = "Run only integration tests"
run = ["go test -v -tags=integration ./... -race -timeout 120s"]

[tasks.bench]
description = "Run all benchmarks (2-3 minutes)"
run = ["go test ./... -bench=. -benchmem -run=^$"]

[tasks."bench:core"]
description = "Core benchmarks: 1/10/100/1K/10K entries, single vs multi-process, acks (~25s)"
run = [
  """go test ./... -bench='BenchmarkWrite_(SingleEntry|SmallBatch|LargeBatch|HugeBatch|MegaBatch)$|BenchmarkMultiProcessThroughput/(SingleEntry|SmallBatch|LargeBatch|HugeBatch|MegaBatch)$|BenchmarkConsumerAck/(SingleAck|BatchAckMultiShard)$' -benchmem -run=^$ -benchtime=1s""",
]

[tasks."bench:quick"]
description = "Quick comparison: 1/10/100/1K/10K entries, single vs multi-process (~10s)"
run = [
  """go test ./... -bench='BenchmarkWrite_(SingleEntry|SmallBatch|LargeBatch|HugeBatch|MegaBatch)$|BenchmarkMultiProcessThroughput/(SingleEntry|SmallBatch|LargeBatch|HugeBatch|MegaBatch)$|BenchmarkConsumerAck/SingleAck$' -benchmem -run=^$ -benchtime=0.5s""",
]

[settings]
experimental = true
activate_aggressive = true
